name: runner-node-pre-post-conditionals
on:
  workflow_dispatch:

jobs:
  on-success:
    runs-on: self-hosted
    steps:
      - uses: ./runner/node-pre-post-on-success
        id: action-success

  on-success-check:
    runs-on: self-hosted
    needs: on-success
    steps:
      - uses: actions/github-script@v5
        with:
          script: |
            const run_id = ${{ github.run_id }};
            async function getSuccessJobIdFromRunId(run_id) {
                return await github.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs', {
                    owner: 'fhammerl',
                    repo: 'canary',
                    run_id
                })
            }

            async function getJobLogs(job_id) {
                return await github.rest.actions.downloadJobLogsForWorkflowRun({
                    owner: 'fhammerl',
                    repo: 'canary',
                    job_id
                })
            }

            getSuccessJobIdFromRunId(run_id).then(response => {
                const job_id = response.data.jobs.filter(job => job.name == "on-success")[0].id;
                getJobLogs(job_id).then(logs => {
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("PRE-STEP-COMPLETE") != -1).length == 0) {
                        throw 'Pre-step did not run!'
                    }
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("MAIN-STEP-COMPLETE") != -1).length == 0) {
                        throw 'Main step did not run!'
                    }
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("POST-STEP-COMPLETE") != -1).length == 0) {
                        throw 'Post-step did not run!'
                    }

                    console.log("All checks successful!")
                });
            });

  on-success-nested:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
      - uses: ./runner/nested-node-pre-post-on-success

  on-success-nested-check:
    runs-on: self-hosted
    needs: on-success-nested
    steps:
      - uses: actions/github-script@v5
        with:
          script: |
            const run_id = ${{ github.run_id }};
            async function getSuccessJobIdFromRunId(run_id) {
                return await github.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs', {
                    owner: 'fhammerl',
                    repo: 'canary',
                    run_id
                })
            }

            async function getJobLogs(job_id) {
                return await github.rest.actions.downloadJobLogsForWorkflowRun({
                    owner: 'fhammerl',
                    repo: 'canary',
                    job_id
                })
            }

            getSuccessJobIdFromRunId(run_id).then(response => {
                const job_id = response.data.jobs.filter(job => job.name == "on-success-nested")[0].id;
                getJobLogs(job_id).then(logs => {
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("PRE-STEP-COMPLETE") != -1).length == 0) {
                        throw 'Pre-step did not run!'
                    }
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("MAIN-STEP-COMPLETE") != -1).length == 0) {
                        throw 'Main step did not run!'
                    }
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("POST-STEP-COMPLETE") != -1).length == 0) {
                        throw 'Post-step did not run!'
                    }

                    console.log("All checks successful!")
                });
            });

      
  on-failure-job-failing:
    continue-on-error: true
    runs-on: self-hosted
    steps:
      - run: exit 1
      - uses: actions/checkout@v2
      - uses: ./runner/nested-node-pre-post-on-failure
        if: failure()

  on-failure-job-failing-check:
    runs-on: self-hosted
    needs: on-failure-job-failing
    steps:
      - uses: actions/github-script@v5
        with:
          script: |
            const run_id = ${{ github.run_id }};
            async function getSuccessJobIdFromRunId(run_id) {
                return await github.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs', {
                    owner: 'fhammerl',
                    repo: 'canary',
                    run_id
                })
            }

            async function getJobLogs(job_id) {
                return await github.rest.actions.downloadJobLogsForWorkflowRun({
                    owner: 'fhammerl',
                    repo: 'canary',
                    job_id
                })
            }

            getSuccessJobIdFromRunId(run_id).then(response => {
                const job_id = response.data.jobs.filter(job => job.name == "on-failure-job-failing")[0].id;
                getJobLogs(job_id).then(logs => {
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("PRE-STEP-COMPLETE") != -1).length != 0) {
                        throw 'Pre-step ran but job is failed later on step 1'
                    }
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("MAIN-STEP-COMPLETE") != -1).length == 0) {
                        throw 'Main step did not run!'
                    }
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("POST-STEP-COMPLETE") != -1).length == 0) {
                        throw 'Post-step did not run!'
                    }

                    console.log("All checks successful!")
                });
            });


  on-failure-composite-failing-job-success:
    continue-on-error: true
    runs-on: self-hosted
    steps:
      - uses: ./runner/nested-node-pre-post-on-success
        with:
          exit-code: 1
        continue-on-error: true

  on-failure-composite-failing-job-success-check:
    runs-on: self-hosted
    needs: on-failure-composite-failing-job-success
    steps:
      - uses: actions/github-script@v5
        with:
          script: |
            const run_id = ${{ github.run_id }};
            async function getSuccessJobIdFromRunId(run_id) {
                return await github.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs', {
                    owner: 'fhammerl',
                    repo: 'canary',
                    run_id
                })
            }

            async function getJobLogs(job_id) {
                return await github.rest.actions.downloadJobLogsForWorkflowRun({
                    owner: 'fhammerl',
                    repo: 'canary',
                    job_id
                })
            }

            getSuccessJobIdFromRunId(run_id).then(response => {
                const job_id = response.data.jobs.filter(job => job.name == "on-failure-composite-failing-job-success")[0].id;
                getJobLogs(job_id).then(logs => {
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("PRE-STEP-COMPLETE") != -1).length == 0) {
                        throw 'Pre-step did not run!'
                    }
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("MAIN-STEP-COMPLETE") != -1).length == 0) {
                        throw 'Main step did not run!'
                    }
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("POST-STEP-COMPLETE") != -1).length == 0) {
                        throw 'Post-step did not run!'
                    }

                    console.log("All checks successful!")
                });
            });

  on-failure-composite-failing-job-failing:
    continue-on-error: true
    runs-on: self-hosted
    steps:
      - run: exit 1
      - uses: actions/checkout@v2
      - uses: ./runner/nested-node-pre-post-on-failure
        with:
          exit-code: 1
        if: failure()

  on-composite-failure-job-failing-check:
      runs-on: self-hosted
      needs: on-failure-composite-failing-job-failing
      steps:
        - uses: actions/checkout@v2
        - uses: actions/github-script@v5
          with:
            script: |
              const run_id = ${{ github.run_id }};
              async function getSuccessJobIdFromRunId(run_id) {
                  return await github.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs', {
                      owner: 'fhammerl',
                      repo: 'canary',
                      run_id
                  })
              }

              async function getJobLogs(job_id) {
                  return await github.rest.actions.downloadJobLogsForWorkflowRun({
                      owner: 'fhammerl',
                      repo: 'canary',
                      job_id
                  })
              }

              getSuccessJobIdFromRunId(run_id).then(response => {
                  const job_id = response.data.jobs.filter(job => job.name == "on-failure-composite-failing-job-failing")[0].id;
                  getJobLogs(job_id).then(logs => {
                      if (logs.data.split(/\r?\n/).filter(line => line.indexOf("PRE-STEP-COMPLETE") != -1).length != 0) {
                          throw 'Pre-step ran but job is failed later on step 1'
                      }
                      if (logs.data.split(/\r?\n/).filter(line => line.indexOf("MAIN-STEP-COMPLETE") != -1).length == 0) {
                          throw 'Main step did not run!'
                      }
                      if (logs.data.split(/\r?\n/).filter(line => line.indexOf("POST-STEP-COMPLETE") != -1).length == 0) {
                          throw 'Post-step did not run!'
                      }

                      console.log("All checks successful!")
                  });
              });
  
  on-failure-double-nested-job-failing:
    runs-on: self-hosted
    continue-on-error: true
    steps:
      - run: exit 1
      - uses: actions/checkout@v2
      - uses: ./runner/double-nested-node-pre-post-on-failure
        if: always()

  on-failure-double-nested-job-failing-check:
    runs-on: self-hosted
    needs: on-failure-double-nested-job-failing
    steps:
      - uses: actions/github-script@v5
        with:
          script: |
            const run_id = ${{ github.run_id }};
            async function getSuccessJobIdFromRunId(run_id) {
                return await github.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs', {
                    owner: 'fhammerl',
                    repo: 'canary',
                    run_id
                })
            }

            async function getJobLogs(job_id) {
                return await github.rest.actions.downloadJobLogsForWorkflowRun({
                    owner: 'fhammerl',
                    repo: 'canary',
                    job_id
                })
            }

            getSuccessJobIdFromRunId(run_id).then(response => {
                const job_id = response.data.jobs.filter(job => job.name == "on-failure-double-nested-job-failing")[0].id;
                getJobLogs(job_id).then(logs => {
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("PRE-STEP-COMPLETE") != -1).length != 0) {
                        throw 'Pre-step ran but job is failed later on step 1'
                    }
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("MAIN-STEP-COMPLETE") != -1).length == 0) {
                        throw 'Main step did not run!'
                    }
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("POST-STEP-COMPLETE") != -1).length == 0) {
                        throw 'Post-step did not run!'
                    }

                    console.log("All checks successful!")
                });
            });

  on-failure:
    runs-on: self-hosted
    continue-on-error: true
    steps:
      - run: exit 1
      - uses: actions/checkout@v2
      - uses: ./runner/node-pre-post-on-failure
        id: action-success
        if: failure()

  on-failure-check:
    runs-on: self-hosted
    needs: on-failure
    steps:
      - uses: actions/github-script@v5
        with:
          script: |
            const run_id = ${{ github.run_id }};
            async function getSuccessJobIdFromRunId(run_id) {
                return await github.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs', {
                    owner: 'fhammerl',
                    repo: 'canary',
                    run_id
                })
            }

            async function getJobLogs(job_id) {
                return await github.rest.actions.downloadJobLogsForWorkflowRun({
                    owner: 'fhammerl',
                    repo: 'canary',
                    job_id
                })
            }

            getSuccessJobIdFromRunId(run_id).then(response => {
                const job_id = response.data.jobs.filter(job => job.name == "on-failure")[0].id;
                getJobLogs(job_id).then(logs => {
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("PRE-STEP-COMPLETE") != -1).length != 0) {
                        throw 'Pre-step ran but job is failed later on step 1'
                    }
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("MAIN-STEP-COMPLETE") != -1).length == 0) {
                        throw 'Main step did not run!'
                    }
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("POST-STEP-COMPLETE") != -1).length == 0) {
                        throw 'Post-step did not run!'
                    }

                    console.log("All checks successful!")
                });
            });

  on-success-job-failing:
    runs-on: self-hosted
    continue-on-error: true
    steps:
      - run: exit 1
      - uses: actions/checkout@v2
      - uses: ./runner/node-pre-post-on-success
        id: action-success
        if: failure()

  on-success-job-failing-check:
    runs-on: self-hosted
    needs: on-success-job-failing
    steps:
      - uses: actions/github-script@v5
        with:
          script: |
            const run_id = ${{ github.run_id }};
            async function getSuccessJobIdFromRunId(run_id) {
                return await github.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs', {
                    owner: 'fhammerl',
                    repo: 'canary',
                    run_id
                })
            }

            async function getJobLogs(job_id) {
                return await github.rest.actions.downloadJobLogsForWorkflowRun({
                    owner: 'fhammerl',
                    repo: 'canary',
                    job_id
                })
            }

            getSuccessJobIdFromRunId(run_id).then(response => {
                const job_id = response.data.jobs.filter(job => job.name == "on-success-job-failing")[0].id;
                getJobLogs(job_id).then(logs => {
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("PRE-STEP-COMPLETE") != -1).length == 0) {
                        throw 'Pre-step did not run!'
                    }
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("MAIN-STEP-COMPLETE") != -1).length == 0) {
                        throw 'Main step did not run!'
                    }
                    if (logs.data.split(/\r?\n/).filter(line => line.indexOf("POST-STEP-COMPLETE") != -1).length != 0) {
                        throw 'Post-step ran against condition!'
                    }

                    console.log("All checks successful!")
                });
            });

